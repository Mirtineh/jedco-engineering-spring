{"version":3,"sources":["services/rootUrl.js","views/pages/login/Login.js","services/client.js"],"names":["getRootUrl","cm_url","um_url","file_url","Login","username","setUsername","useState","password","setPassword","userNameInvalid","setUsernameInvalid","passwordInvalid","setPasswordInvalid","history","useHistory","handleChange","event","name","target","val","value","store","useStore","auth","length","rootUrl","axios","method","url","data","then","response","authLogin","status","setLogin","push","NotificationManager","success","error","message","catch","err","console","log","_jsx","_Fragment","children","className","CContainer","CRow","CCol","md","lg","xl","_jsxs","CCard","CCardBody","CInputGroup","CInputGroupPrepend","CInputGroupText","CIcon","CInput","id","size","invalid","placeholder","onChange","onKeyDown","e","key","CInvalidFeedback","type","autoComplete","xs","CButton","color","onClick","CCardFooter","Link","to","style","marginLeft","marginRight"],"mappings":"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","file":"static/js/10.cc952b0d.chunk.js","sourcesContent":["import React from 'react'\n\nexport const getRootUrl = () => {\n  // const cm_url = \"http://172.16.200.17:31456/JedcoInspection/rest\";\n  // const um_url = \"http://172.16.200.17:31456/JedcoInspection/rest\";\n  // const file_url = \"http://172.16.200.17:31456\";\n  const cm_url = \"/Engineering\";\n  const um_url = \"/Engineering\";\n  const file_url = \"\";\n    const url = {cm_url,um_url, file_url};\n    return url;\n  };\n","import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCol,\n  CContainer,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CRow,\n  CInvalidFeedback\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { authLogin } from '../../../services/client'\nimport { useStore } from '../../../MobxStore'\nimport { useHistory } from 'react-router-dom'\nimport { NotificationManager } from 'react-notifications';\n\n\nconst Login = () => {\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const [userNameInvalid, setUsernameInvalid] = useState(false);\n  const [passwordInvalid, setPasswordInvalid] = useState(false);\n\n\n  const history = useHistory();\n\n\n  const handleChange = (event) => {\n\n    var name = event.target.name;\n    var val = event.target.value;\n\n    if (name == \"username\") {\n      setUsername(val);\n      if (val == \"\") {\n        setUsernameInvalid(true);\n      } else {\n        setUsernameInvalid(false);\n      }\n    }\n    if (name == \"password\") {\n      setPassword(val);\n      if (val == \"\") {\n        setPasswordInvalid(true);\n      } else {\n        setPasswordInvalid(false);\n      }\n    }\n  }\n\n\n  const store = useStore();\n  const auth = () => {\n    if (username.length == 0) {\n      setUsernameInvalid(true);\n    } else if (password.length == 0) {\n      setPasswordInvalid(true);\n    } else {\n      authLogin(username, password).then(response => {\n\n        // console.log(\"passed result \" + response.message);\n        if (response.status) {\n\n          store.setLogin(response);\n          history.push('/')\n          NotificationManager.success('Login Successful!', 'Success', 3000);\n\n        } else {\n          NotificationManager.error(response.message, 'Login Failed!', 3000);\n        }\n      })\n        .catch(err => {\n          console.log(err);\n          NotificationManager.error(\"Unable to try user login, check your connection\", 'Login Failed!', 3000);\n        });\n\n    }\n\n\n  }\n\n  return (\n    <>\n\n      <div className=\"c-app c-default-layout flex-row align-items-center\">\n        <CContainer>\n          <CRow className=\"justify-content-center\">\n            <CCol md=\"9\" lg=\"7\" xl=\"6\">\n              <CCard className=\"mx-4\">\n                <CCardBody className=\"p-4\">\n                  <h1>Login</h1>\n                  <p className=\"text-muted\">Enter your username and password</p>\n\n                  <CInputGroup className=\"mb-3\" >\n                    <CInputGroupPrepend>\n                      <CInputGroupText>\n                        <CIcon name=\"cil-user\" />\n                      </CInputGroupText>\n\n                    </CInputGroupPrepend>\n                    <CInput\n                      id=\"username\"\n                      size=\"large\"\n                      name=\"username\"\n                      invalid={userNameInvalid}\n                      value={username}\n                      placeholder=\"Username\"\n                      onChange={handleChange}\n                      onKeyDown={(e) => {\n                        if (e.key === 'Enter') {\n                          auth();\n                        }\n                      }}\n                    />\n                    <CInvalidFeedback className=\"help-block\">\n                      Please provide a valid username\n                  </CInvalidFeedback>\n\n                  </CInputGroup>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>\n                        <CIcon name=\"cil-lock-locked\" />\n                      </CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput\n                      type=\"password\"\n                      placeholder=\"Password\"\n                      autoComplete=\"new-password\"\n                      name=\"password\"\n                      value={password}\n                      invalid={passwordInvalid}\n                      onChange={handleChange}\n                      onKeyDown={(e) => {\n                        if (e.key === 'Enter') {\n                          auth();\n                        }\n                      }}\n                    />\n                    <CInvalidFeedback className=\"help-block\">\n                      Please provide a valid password\n                  </CInvalidFeedback>\n                  </CInputGroup>\n\n                  <CRow>\n                  <CCol xs=\"6\" className=\"text-left\">\n                        <CButton color=\"link\" className=\"px-0\">Forgot password?</CButton>\n                      </CCol>\n                      <CCol xs=\"6\">\n                      <div className=\"d-flex justify-content-end\" md=\"6\">\n                    <button\n                      type=\"submit\"\n                      className=\"btn btn-outline-success m-2 btn-md\"\n                      onClick={auth}\n                    >Login\n                          </button>\n                  </div>\n                      </CCol>\n\n                    </CRow>\n\n                </CCardBody>\n                <CCardFooter>\n                <CRow>\n                      <CCol xs=\"4\">\n\n                      </CCol>\n                      <CCol xs=\"8\" className=\"text-right\">Not Registered yet?\n                      <Link to=\"/register\">\n                        <CButton color=\"link\" className=\"px-0\" style={{marginLeft:10, marginRight:10}}> Register here</CButton>\n                        </Link>\n                      </CCol>\n                    </CRow>\n                </CCardFooter>\n              </CCard>\n            </CCol>\n          </CRow>\n        </CContainer>\n      </div>\n\n\n    </>\n  )\n}\n\nexport default Login\n","import { getRootUrl } from './rootUrl';\nimport axios from 'axios';\n\nexport function authLogin(username, password) {\n  const rootUrl = getRootUrl().um_url;\n  return axios({\n    method: 'post',\n    url: rootUrl + \"/auth\",\n    data: {\n      \"username\": username,\n      \"password\": password\n    }\n  }).then(response => response.data)\n}\n\nexport function listStatuses(token) {\n  const rootUrl = getRootUrl().um_url;\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n  return axios.get(\n    rootUrl + \"/statuses/getAllStatuses\",\n    config).then(response => response.data)\n}\n\nexport function listAssessmentbyId(token, id) {\n  const rootUrl = getRootUrl().um_url;\n  const config = {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n  return axios.get(\n    rootUrl + \"/assessment/listAssessmentsByInspection?inspectionId=\"+id,\n    config).then(response => response.data)\n}\n"],"sourceRoot":""}